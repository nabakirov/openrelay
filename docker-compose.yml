version: "3"
services:
  corebuild:
    image: corebuild
    build:
      context: ./
      dockerfile: Dockerfile.composebase
  redis:
    image: redis:alpine
    ports:
      - "6379"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  postgres:
    image: postgres
    ports:
      - "5432"
    environment:
      POSTGRES_PASSWORD: secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  ingest:
    build:
      context: ./
      dockerfile: Dockerfile.ingest
    image: "openrelay/ingest:${TAG:-latest}"
    ports:
      - "8081:8080"
    command: ["/ingest", "postgres://ingest${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "${REDIS_HOST:-redis:6379}", "${RELAY_ADDRESS}", "queue://ingest"]
    depends_on:
      - redis
      - corebuild
    environment:
      POSTGRES_PASSWORD: password
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  exchangesplitter:
    build:
      context: ./
      dockerfile: Dockerfile.exchangesplitter
    image: "openrelay/exchangesplitter:${TAG:-latest}"
    command: ["/exchangesplitter", "${REDIS_HOST:-redis:6379}", "queue://ingest", "testrpc"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fillupdate:
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: "openrelay/fillupdate:${TAG:-latest}"
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "topic://ordersfilled", "file:///bloom/data/testdata", "queue://fillupdate=>queue://fundcheck"]
    volumes:
      - bloomdata:/bloom/data
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fundcheckrelay:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: "openrelay/fundcheckrelay:${TAG:-latest}"
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://fundcheck=>queue://poolfilter", "--invalidation=topic://newblocks"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure
  fillmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.fillmonitorng
    image: "openrelay/fillmonitorng:${TAG:-latest}"
    command: ["/fillmonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://fillblocks", "queue://ordersfilled", "file:///bloom/data/testdata", "${RELAY_ADDRESS}"]
    volumes:
      - bloomdata:/bloom/data
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  multisigmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.multisigmonitor
    image: "openrelay/multisigmonitor:${TAG:-latest}"
    command: ["/multisigmonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://multisigblocks", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  affiliatemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.affiliatemonitor
    image: "openrelay/affiliatemonitor:${TAG:-latest}"
    command: ["/affiliatemonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://affiliateblocks", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  pgfillindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgfillindexer
    image: "openrelay/pgfillindexer:${TAG:-latest}"
    command: ["/fillindexer", "${REDIS_HOST:-redis:6379}", "queue://pgordersfilled", "postgres://indexer${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "topic://instant-broadcast"]
    depends_on:
      - redis
      - postgres
      - corebuild
    environment:
      POSTGRES_PASSWORD: password
    restart: on-failure

  initialize:
    build:
      context: ./
      dockerfile: Dockerfile.initialize
    image: "openrelay/initialize:${TAG:-latest}"
    command: ["/initialize", "${REDIS_HOST:-redis:6379}", "${ZRX_FEE:-500000000000000000}", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
  contractinit:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    command: ["/project/setup.sh", "redis://${REDIS_HOST:-redis:6379}"]
    environment:
      ETHEREUM_URL: "${ETHEREUM_NODE:-http://ethnode:8545}"
    depends_on:
      - redis
      - corebuild
  entrypoint:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    volumes:
      - "./js:/project"
    command: ["node", "/project/hang.js"]
  pgindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgindexer
    image: "openrelay/pgindexer:${TAG:-latest}"
    environment:
      POSTGRES_PASSWORD: password
    command: ["/indexer", "${REDIS_HOST:-redis:6379}", "queue://pgindexer", "postgres://indexer${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "topic://instant-broadcast"]
    depends_on:
      - postgres
      - redis
      - corebuild
    restart: on-failure
  pgautomigrate:
    build:
      context: ./
      dockerfile: Dockerfile.automigrate
    image: "openrelay/automigrate:${TAG:-latest}"
    environment:
      POSTGRES_PASSWORD: secret
      INDEX_PASSWORD: password
      SEARCH_PASSWORD: password
      SPENDRECORDER_PASSWORD: password
      CANCEL_FILTER_PASSWORD: password
      CANCEL_INDEX_PASSWORD: password
      POOL_FILTER_PASSWORD: password
      TOS_PASSWORD: password
      TOS_MGR_PASSWORD: password
      INGEST_PASSWORD: password
      METADATA_PASSWORD: password
      WS_PASSWORD: password
    command:
      - "/automigrate"
      - "postgres://postgres${POSTGRES_HOST:-postgres}"
      - "env://POSTGRES_PASSWORD"
      - "indexer;env://INDEX_PASSWORD;orderv2.SELECT,orderv2.INSERT,orderv2.UPDATE"
      - "spendrecorder;env://SPENDRECORDER_PASSWORD;orderv2.SELECT,orderv2.INSERT,orderv2.UPDATE"
      - "search;env://SEARCH_PASSWORD;orderv2.SELECT,exchanges.SELECT,pools.SELECT,asset_metadata.SELECT,asset_attributes.SELECT"
      - "cancelfilter;env://CANCEL_FILTER_PASSWORD;cancellations.SELECT"
      - "poolfilter;env://POOL_FILTER_PASSWORD;pools.SELECT,exchanges.SELECT"
      - "ws;env://WS_PASSWORD;pools.SELECT,exchanges.SELECT"
      - "metadata;env://METADATA_PASSWORD;asset_metadata.SELECT,asset_metadata.INSERT,asset_metadata.UPDATE,asset_attributes.SELECT,asset_attributes.INSERT,asset_attributes.UPDATE"
      - "cancelindexer;env://CANCEL_INDEX_PASSWORD;cancellations.SELECT,cancellations.INSERT,cancellations.UPDATE,orderv2.SELECT,orderv2.INSERT,orderv2.UPDATE"
      - "tos;env://TOS_PASSWORD;terms.SELECT,terms_sigs.SELECT,terms_sigs.INSERT,hash_masks.SELECT,hash_masks.INSERT"
      - "ingest;env://INGEST_PASSWORD;terms.SELECT,terms_sigs.SELECT,terms_sigs.INSERT,pools.SELECT,exchanges.SELECT"
      - "tosmgr;env://TOS_MGR_PASSWORD;terms.SELECT,terms.INSERT,terms.UPDATE,terms_sigs.SELECT,terms_sigs.INSERT,terms_sigs.UPDATE,hash_masks.SELECT,hash_masks.INSERT,hash_masks.DELETE"


    depends_on:
      - postgres
      - corebuild
    restart: on-failure
  pgapi:
    build:
      context: ./
      dockerfile: Dockerfile.pgsearchapi
    image: "openrelay/pgsearchapi:${TAG:-latest}"
    ports:
      - "8082:8080"
    command: ["/searchapi", "${REDIS_HOST:-redis:6379}", "topic://newblocks", "postgres://search${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure
  termsapi:
    build:
      context: ./
      dockerfile: Dockerfile.termsapi
    image: "openrelay/termsapi:${TAG:-latest}"
    ports:
      - "8083:8080"
    command: ["/terms", "postgres://tos${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure
  simplerelay:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    image: "openrelay/simplerelay:${TAG:-latest}"
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "queue://ordersfilled=>queue://pgordersfilled=>topic://ordersfilled", "queue://newblocks=>queue://allowanceblocks=>queue://erc721approvalblocks=>queue://spendblocks=>topic://newblocks=>queue://fillblocks=>queue://canceluptoblocks=>queue://affiliateblocks"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  blockmonitorng:
    build:
      context: ./
      dockerfile: Dockerfile.blockmonitorng
    image: "openrelay/blockmonitorng:${TAG:-latest}"
    command: ["/blockmonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://newblocks"]
    environment:
      ETHEREUM_URL: "${ETHEREUM_NODE:-http://ethnode:8545}"
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  allowancemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.allowancemonitor
    image: "openrelay/allowancemonitor:${TAG:-latest}"
    command: ["/allowancemonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://allowanceblocks", "queue://recordspend", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  erc721approvalmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.erc721approvalmonitor
    image: "openrelay/erc721approvalmonitor:${TAG:-latest}"
    command: ["/erc721approvalmonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://erc721approvalblocks", "queue://recordspend", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  spendmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.spendmonitor
    image: "openrelay/spendmonitor:${TAG:-latest}"
    command: ["/spendmonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://spendblocks", "queue://recordspend", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  spendrecorder:
    build:
      context: ./
      dockerfile: Dockerfile.spendrecorder
    image: "openrelay/spendrecorder:${TAG:-latest}"
    command: ["/spendrecorder", "${REDIS_HOST:-redis:6379}", "queue://recordspend", "postgres://spendrecorder${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "topic://instant-broadcast"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  websockets:
    build:
      context: ./
      dockerfile: Dockerfile.websockets
    image: "openrelay/websockets:${TAG:-latest}"
    command: ["/websockets", "${REDIS_HOST:-redis:6379}", "topic://instant-broadcast", "postgres://ws${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD"]
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "8084:8080"
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  canceluptomonitor:
    build:
      context: ./
      dockerfile: Dockerfile.canceluptomonitor
    image: "openrelay/canceluptomonitor:${TAG:-latest}"
    command: ["/canceluptomonitor", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://canceluptoblocks", "queue://recordcancel", "${RELAY_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  canceluptofilter:
    build:
      context: ./
      dockerfile: Dockerfile.canceluptofilter
    image: "openrelay/canceluptofilter:${TAG:-latest}"
    command: ["/canceluptofilter", "${REDIS_HOST:-redis:6379}", "postgres://cancelfilter${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "queue://${RELAY_ADDRESS}-testrpc=>queue://fillupdate"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
      - postgres
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  canceluptoindexer:
    build:
      context: ./
      dockerfile: Dockerfile.canceluptoindexer
    image: "openrelay/canceluptoindexer:${TAG:-latest}"
    command: ["/canceluptoindexer", "${REDIS_HOST:-redis:6379}", "queue://recordcancel", "postgres://cancelindexer${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "topic://instant-broadcast"]
    environment:
      POSTGRES_PASSWORD: password
    restart: on-failure

  poolfilter:
    build:
      context: ./
      dockerfile: Dockerfile.poolfilter
    image: "openrelay/poolfilter:${TAG:-latest}"
    command: ["/poolfilter", "postgres://poolfilter${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_NODE:-http://ethnode:8545}", "queue://poolfilter=>queue://pgindexer=>queue://metadataindexer"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
      - postgres
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  metadataindexer:
    build:
      context: ./
      dockerfile: Dockerfile.metadataindexer
    image: "openrelay/metadataindexer:${TAG:-latest}"
    command: ["/metadataindexer", "${REDIS_HOST:-redis:6379}", "queue://metadataindexer", "postgres://metadata${POSTGRES_HOST:-postgres}", "env://POSTGRES_PASSWORD", "${ETHEREUM_NODE:-http://ethnode:8545}"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
      - postgres
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  queuemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.queuemonitor
    image: "openrelay/queuemonitor:${TAG:-latest}"
    command: ["/queuemonitor", "${REDIS_HOST:-redis:6379}", "1", "newblocks-ropsten", "ordersfilled", "pgordersfilled", "newblocks", "released-ropsten", "fundcheck-ropsten", "allowanceblocks", "recheck-ropsten", "fillupdate-ropsten", "indexer", "preindexer", "spendblocks-ropsten", "recordspend", "ordersfilled-ropsten", "delay2-ropsten", "released", "fundcheck", "allowanceblocks-ropsten", "recheck2-ropsten", "fillupdate", "fillblocks-ropsten", "spendblocks", "recheck2", "delay1", "delay2", "ingest", "fillblocks", "pgindexer", "delay1-ropsten", "multisigblocks", "recheck", "canceluptoblocks", "recordcancel", "${RELAY_ADDRESS}-testrpc"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  bloomdata:
